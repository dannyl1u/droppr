package main

import (
	"fmt"
	"net/http"
	"time"
)

// Registers a drop
func serveRegister(w http.ResponseWriter, r *http.Request) {
	setCORS(&w)

	if r.Method != http.MethodPost {
		http.Error(w,
			http.StatusText(http.StatusBadRequest),
			http.StatusBadRequest)
		return
	}

	// check for an existing session in cookies; don't register if that is the case
	existingToken, existingId := getSession(r)
	if len(existingToken) > 0 && len(existingId) > 0 {
		rows, err := db.Query(
			"SELECT drop_role FROM sessions WHERE token = $1 AND drop_id = $2",
			existingToken,
			existingId,
		)

		if err == nil && rows.Next() {
			// read the session token generated by the db
			var role string
			rows.Scan(&role) // TODO: handle error (lazy)
			rows.Close()

			// check if already a dropper
			if role == "dropper" {
				s := fmt.Sprintf("\"%s\"", existingId)
				w.Write([]byte(s)) // response body contains JSON string of drop ID
				return
			}

			// if not dropper, then request wants to be a dropper; continue
		}
	}

	// generate session token and drop ID
	id, err := generateDropId()
	if err != nil {
		fmt.Printf("[Error] in request to /api/register: %v", err)
		http.Error(w,
			http.StatusText(http.StatusInternalServerError),
			http.StatusInternalServerError)
		return
	}

	// insert a session row, generating a session token
	rows, err := db.Query("INSERT INTO sessions(drop_id, drop_role) VALUES ($1, 'dropper') RETURNING token", id)
	if err != nil || !rows.Next() {
		fmt.Printf("[Error] in request to /api/register: %v", err)
		http.Error(w,
			http.StatusText(http.StatusInternalServerError),
			http.StatusInternalServerError)
		return
	}

	// read the session token generated by the db
	var token string
	rows.Scan(&token) // TODO: handle error (lazy)
	rows.Close()

	// set the session_token cookie
	http.SetCookie(w, &http.Cookie{
		Name:     "session_token",
		Value:    token,
		Path:     "/",
		Expires:  time.Now().Add(24 * time.Hour), // expires in 24 hours
		HttpOnly: true,                           // don't let JS see session_token
	})

	// set the drop_id cookie
	http.SetCookie(w, &http.Cookie{
		Name:     "drop_id",
		Value:    id,
		Path:     "/",
		Expires:  time.Now().Add(24 * time.Hour), // expires in 24 hours
		HttpOnly: true,                           // let JS see drop_id
	})

	s := fmt.Sprintf("\"%s\"", id)
	w.Write([]byte(s)) // response body contains JSON string of drop ID
}
